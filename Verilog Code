module SFIFO(
    input wire [3:0] din,
    input wire rst,
    input wire rd_en,
    input wire wr_en,
    output reg [3:0] dout,
    output reg full,
    output reg empty,
    input clk
    );
parameter depth = 8;
reg [3:0] mem [7:0];
reg [2:0] rd_ptr = 0;
reg [2:0] wr_ptr = 0;
always@(posedge clk or posedge rst) begin
        if(rst)
            begin
                rd_ptr=0;
                wr_ptr=0;
                full=0;
                empty=1;
          end else begin
              if(wr_en && !full) begin
                mem[wr_ptr[2:0]] <= din;
                wr_ptr <= wr_ptr + 1;
               end
               
              if(rd_en && !empty) begin
              dout <= mem[rd_ptr[2:0]];
              rd_ptr <= rd_ptr + 1;
              end
              full <= (wr_ptr - rd_ptr == 7);
              empty <= wr_ptr == rd_ptr;
         end
end                   
endmodule
